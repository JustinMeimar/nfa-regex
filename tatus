[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 348c102..2f9964c 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -1,2 +1,3 @@[m
 /build[m
 /bin[m
[32m+[m[32m.vscode[m
\ No newline at end of file[m
[1mdiff --git a/include/NFA.h b/include/NFA.h[m
[1mindex aa98fc2..7652b5a 100644[m
[1m--- a/include/NFA.h[m
[1m+++ b/include/NFA.h[m
[36m@@ -15,9 +15,10 @@[m
 #define EPSILON_H[m
     #define EPSILON '\xCE' //Unicode character for epsilon [m
 #endif[m
[32m+[m[32m#define DEBUG_NFA 1[m
 [m
[31m-typedef std::tuple<std::shared_ptr<State>, const char> TransitionTuple;[m
[31m-typedef std::map<TransitionTuple, std::shared_ptr<State>> TransitionTable;[m
[32m+[m[32mtypedef std::tuple<std::shared_ptr<State>, const char, std::shared_ptr<State>> TransitionTuple;[m
[32m+[m[32mtypedef std::set<TransitionTuple> TransitionTable;[m
 [m
 class NFA {[m
     public:[m
[36m@@ -29,6 +30,7 @@[m [mclass NFA {[m
         std::set<std::shared_ptr<State>> acceptStates; // F[m
         std::shared_ptr<State> startState; // s[m
         TransitionTable transition_table; [m
[32m+[m[32m        bool accept; // flipped to true if a path[m[41m [m
 [m
         //construct NFA:[m
         void addTransition(std::shared_ptr<State> q1, std::shared_ptr<State> q2, const char sigma); //add a transitino from (q1, sigma)  > q2[m
[36m@@ -37,8 +39,11 @@[m [mclass NFA {[m
         void constructFromStar(std::shared_ptr<NFA> lhs);[m
 [m
         //execution:[m
[31m-        void execute(const std::string &string);[m
[32m+[m[32m        void execute(std::shared_ptr<State> current_state, const std::string &string, unsigned int input_pointer);[m
 [m
         //helper[m
         void printTransitionTable();[m
[32m+[m
[32m+[m[32m    private:[m[41m [m
[32m+[m[32m        std::set<TransitionTuple> computeAvailableTransitions(std::shared_ptr<State> current_state, char c);[m
 };[m
\ No newline at end of file[m
[1mdiff --git a/src/NFA.cpp b/src/NFA.cpp[m
[1mindex 2ae2b58..0262dcb 100644[m
[1m--- a/src/NFA.cpp[m
[1m+++ b/src/NFA.cpp[m
[36m@@ -24,99 +24,112 @@[m [mNFA::NFA(ParserRule rule, std::shared_ptr<NFA> lhs, std::shared_ptr<NFA> rhs) {[m
         case RULE_STAR:[m
             constructFromStar(lhs);[m
     }[m
[31m-[m
 }     [m
 [m
 void NFA::constructFromUnion(std::shared_ptr<NFA> lhs, std::shared_ptr<NFA> rhs) {[m
[31m-    // Create new start state [m
[32m+[m[32m    // Create new start state[m[41m  [m
     std::shared_ptr<State> new_start_state = std::make_shared<State>(REJECT);[m
     this->startState = new_start_state;[m
     this->transition_table = lhs->transition_table;[m
[32m+[m[41m    [m
[32m+[m[32m    #if DEBUG_NFA[m
[32m+[m[32m        std::cout << "== Construct from union == " << std::endl;[m
[32m+[m[32m    #endif[m
 [m
     for ( TransitionTable::iterator it = rhs->transition_table.begin(); it != rhs->transition_table.end(); it++) { // for body[m
 [m
[31m-        // Get key and value[m
[31m-        TransitionTuple key = it->first;[m
[31m-        std::shared_ptr<State> value = it->second;[m
[31m-[m
[31m-        #if DEBUG [m
[31m-            std::shared_ptr<State> q1 = std::get<0>(key);[m
[31m-            const char sigma = std::get<1>(key);[m
[31m-            std::cout << q1->type << std::endl;[m
[31m-            std::cout << sigma << std::endl;[m
[31m-        #endif[m
[31m-[m
[31m-        this->transition_table.insert([m
[31m-            {key, value} [m
[31m-        );[m
[32m+[m[32m        TransitionTuple transition_tuple = *it;[m
[32m+[m[32m        std::shared_ptr<State> current_state = std::get<0>(transition_tuple);[m
[32m+[m[32m        std::shared_ptr<State> next_state = std::get<2>(transition_tuple);[m
[32m+[m[32m        const char sigma = std::get<1>(transition_tuple);[m
[32m+[m[32m        this->transition_table.insert(*it);[m
     }[m
 [m
[31m-    std::cout << this->transition_table.size() << std::endl;[m
[32m+[m[32m    // std::cout << this->transition_table.size() << std::endl;[m
     addTransition(startState, lhs->startState, EPSILON);[m
     addTransition(startState, rhs->startState, EPSILON);[m
[31m-    std::cout << this->transition_table.size() << std::endl;[m
[32m+[m[32m    // std::cout << this->transition_table.size() << std::endl;[m
 }[m
 [m
[31m-void NFA::constructFromConcat(std::shared_ptr<NFA> lhs, std::shared_ptr<NFA> rhs) {[m
[32m+[m[32mvoid NFA::constructFromConcat(std::shared_ptr<NFA> lhs, std::shared_ptr<NFA> rhs) {}[m
[32m+[m
[32m+[m[32mvoid NFA::constructFromStar(std::shared_ptr<NFA> lhs) {}[m
[32m+[m
[32m+[m[32mvoid NFA::addTransition(std::shared_ptr<State> q1, std::shared_ptr<State> q2, const char sigma) {[m
[32m+[m[41m    [m
[32m+[m[32m    TransitionTuple transition_tuple = {q1, sigma, q2};[m[41m  [m
[32m+[m[41m    [m
[32m+[m[32m    #if DEBUG_NFA[m
[32m+[m[32m    #endif[m
 [m
[32m+[m[32m    transition_table.insert(transition_tuple);[m
 }[m
 [m
[31m-void NFA::constructFromStar(std::shared_ptr<NFA> lhs) {[m
[32m+[m[32mstd::set<TransitionTuple> NFA::computeAvailableTransitions(std::shared_ptr<State> current_state, char c) {[m
[32m+[m[41m    [m
[32m+[m[32m    std::set<TransitionTuple> available_transitions;[m[41m [m
[32m+[m[32m    for (TransitionTable::iterator it = transition_table.begin(); it != transition_table.end(); it++) { // for body[m
 [m
[32m+[m[32m        TransitionTuple transition_tuple = *it;[m
[32m+[m
[32m+[m[32m        std::shared_ptr<State> q1 = std::get<0>(transition_tuple);[m
[32m+[m[32m        std::shared_ptr<State> q2 = std::get<2>(transition_tuple);[m
[32m+[m[32m        const char sigma = std::get<1>(transition_tuple);[m
[32m+[m
[32m+[m[32m        if (current_state == q1 && (c == sigma || sigma == EPSILON)) {[m
[32m+[m[32m            available_transitions.insert( *it );[m[41m [m
[32m+[m[32m        }[m[41m  [m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    return available_transitions;[m
 }[m
 [m
[31m-void NFA::addTransition(std::shared_ptr<State> q1, std::shared_ptr<State> q2, const char sigma) {[m
[32m+[m[32mvoid NFA::execute(std::shared_ptr<State> current_state, const std::string &string, unsigned int input_pointer) {[m
 [m
[31m-    // (state, symbol) -> state[m
[31m-    TransitionTuple transition_tuple = {q1, sigma};  [m
[32m+[m[32m    char c = string.at(input_pointer);[m
[32m+[m[32m    std::set<TransitionTuple> available_transitions = computeAvailableTransitions(current_state, c);[m[41m  [m
 [m
[31m-    #if DEBUG [m
[31m-        if (transition_table[transition_tuple] != nullptr) {[m
[31m-            std::cout << "This already exists" << std::endl;[m
[31m-        }[m
[32m+[m[32m    #if DEBUG_NFA[m
[32m+[m[32m        std::cout << "==== EXECUTE ====" << std::endl;[m
[32m+[m[32m        std::cout << "Current State: " << current_state << std::endl;[m
[32m+[m[32m        std::cout << "String: " << string << std::endl;[m
[32m+[m[32m        std::cout << "input pointer: " << input_pointer << std::endl;[m
[32m+[m[32m        std::cout << available_transitions.size() << std::endl;[m
     #endif[m
 [m
[31m-    this->transition_table.insert({transition_tuple, q2});[m
[31m-}[m
[32m+[m[32m    if (available_transitions.size() == 0) {[m
[32m+[m[32m        std::cout << "crash" << std::endl;[m[41m [m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m
 [m
[31m-void NFA::execute(const std::string &string) {[m
[31m-    [m
[31m-    unsigned int input_pointer = 0;[m
[31m-    std::shared_ptr<State> current_state = startState;[m
[31m-    const char c = string.at(0);[m
[31m-    [m
[31m-    for (const char c: string) { [m
[31m-        std::shared_ptr<State> next_state = transition_table[{current_state, c}];[m
[31m-        if (next_state != nullptr) {[m
[31m-            // There is a valid transition[m
[31m-            current_state = next_state;[m
[31m-            if (c != EPSILON) {[m
[31m-                input_pointer++;[m
[32m+[m[32m    for (auto transition : available_transitions) {[m
[32m+[m[32m        int next_input_pointer = input_pointer;[m
[32m+[m[32m        std::shared_ptr<State> q2 = std::get<2>(transition);[m
[32m+[m[41m        [m
[32m+[m[32m        if (input_pointer == string.size() -1) {[m
[32m+[m[32m            // we are at the end of the input string[m
[32m+[m[32m            if (current_state->type == ACCEPT) {[m
[32m+[m[32m                accept = true;[m
[32m+[m[32m            } else {[m
[32m+[m[32m                accept = false;[m
             }[m
[31m-        } else {[m
             break;[m
         }[m
[31m-    }[m
[31m-[m
[31m-    if (current_state->type == ACCEPT && input_pointer == string.size()) {[m
[31m-        std::cout << "String Accepts!" << std::endl;[m
[31m-    } else {[m
[31m-        std::cout << "String Size: " << string.size() << "Current Input:" << input_pointer << std::endl; [m
[31m-        std::cout << "String Rejects!" << std::endl;[m
[31m-    }[m
[31m-[m
[32m+[m[32m        // only increment the input pointer for non-epsilon symbol consumptions.[m
[32m+[m[32m        if (std::get<1>(transition) != EPSILON) {[m
[32m+[m[32m            next_input_pointer++;[m
[32m+[m[32m        }[m
[32m+[m[32m        // recursively execute all possible NFA derivations.[m
[32m+[m[32m        execute(q2, string, next_input_pointer);[m[41m [m
[32m+[m[32m    }[m[41m    [m
     return; [m
 }[m
 [m
 void NFA::printTransitionTable() {[m
     for ( TransitionTable::iterator it = transition_table.begin(); it != transition_table.end(); it++) {[m
         // Get key and value[m
[31m-        TransitionTuple key = it->first;[m
[31m-        std::shared_ptr<State> q2 = it->second;[m
[31m-            [m
[31m-        std::shared_ptr<State> q1 = std::get<0>(key);[m
[31m-        const char sigma = std::get<1>(key);[m
[31m-        std::cout << "(" << q1 << ", "<< sigma << ") =>" << q2 << std::endl;[m
[32m+[m[32m        TransitionTuple transition_tuple = *it;[m
[32m+[m[32m        std::cout << "==Transition Function: " << "(" << std::get<0>(*it) << ", " << std::get<1>(*it) << ") => " << std::get<2>(*it) << std::endl;[m
     }[m
     return;[m
[31m-}[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/Visitor.cpp b/src/Visitor.cpp[m
[1mindex 1120150..b03f59e 100644[m
[1m--- a/src/Visitor.cpp[m
[1m+++ b/src/Visitor.cpp[m
[36m@@ -58,6 +58,10 @@[m [mvoid Visitor::visitRoot(std::shared_ptr<Node> node) {[m
     // Visit the entire tree [m
     visitChildren(node);[m
 [m
[32m+[m[32m    #if DEBUG[m
[32m+[m[32m        std::cout << expr_stack.size() << std::endl;[m
[32m+[m[32m    #endif[m
[32m+[m
     // Then save the final NFA [m
     this->nfa = expr_stack.top(); [m
     expr_stack.pop(); [m
[36m@@ -134,7 +138,7 @@[m [mvoid Visitor::visitParen(std::shared_ptr<Node> node) {[m
 void Visitor::visitLeaf(std::shared_ptr<Node> node) {[m
 [m
     #if DEBUG[m
[31m-        std::cout << "Visit Leaf" << std::endl;[m
[32m+[m[32m        std::cout << "Visit Leaf: " << node->token->character << std::endl;[m
     #endif [m
     std::shared_ptr<NFA> atomicNFA = std::make_shared<NFA>(RULE_LEAF, node->token);[m
     expr_stack.push(atomicNFA);[m
[1mdiff --git a/src/main.cpp b/src/main.cpp[m
[1mindex 19200eb..bc1f28f 100644[m
[1m--- a/src/main.cpp[m
[1m+++ b/src/main.cpp[m
[36m@@ -27,14 +27,18 @@[m [mint main(int argc, char** argv) {[m
     regexParser->regex();[m
 [m
     std::shared_ptr<Node> root = regexParser->root; [m
[31m-[m
     std::shared_ptr<Visitor> visitor = std::make_shared<Visitor>(); [m
     visitor->visit(root);[m
 [m
[31m-    std::shared_ptr<NFA> nfa = visitor->nfa;[m
[31m-    // std::cout << nfa << std::endl;[m
[31m-    nfa->printTransitionTable(); [m
[31m-    // nfa->execute(string);[m
[32m+[m[32m    // std::shared_ptr<NFA> nfa = visitor->nfa;[m
[32m+[m[32m    // nfa->printTransitionTable();[m[41m [m
[32m+[m[32m    // nfa->execute(nfa->startState, string, 0);[m
[32m+[m
[32m+[m[32m    // if (nfa->accept) {[m
[32m+[m[32m        // std::cout << "Accept String :D" << std::endl;[m
[32m+[m[32m    // } else {[m
[32m+[m[32m        // std::cout << "Reject String :(" << std::endl;[m
[32m+[m[32m    // }[m
 [m
     return 0;[m
 }[m
\ No newline at end of file[m
